name: Build and Publish Python Package

on:
  workflow_dispatch:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  prepare:
    name: Get maturin version and release version
    runs-on: ubuntu-latest
    outputs:
      maturin_version: ${{ steps.get-maturin-version.outputs.maturin_version }}
      version: ${{ steps.get-version.outputs.version }}
      publish: ${{ steps.get-version.outputs.publish }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Get maturin version from pyproject.toml
        id: get-maturin-version
        shell: python
        run: |
          import os
          import tomllib
          with open("pyproject.toml", "rb") as f:
              data = tomllib.load(f)
          maturin_req = next(req for req in data["build-system"]["requires"] if req.startswith("maturin"))
          version = maturin_req.split(">=")[1] if ">=" in maturin_req else maturin_req.split("==")[1]
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              f.write(f"maturin_version={version}\n")
          print(f"Maturin version: {version}")
      - name: Get stretchable version from tag
        id: get-version
        run: |
          pattern="^refs\/tags\/v([0-9]+\.[0-9]+\.[0-9]+(-(a|alpha|b|beta|dev)[0-9]+)?)$"
          if [[ "${{ github.ref }}" =~ $pattern ]]
          then
            ver="${BASH_REMATCH[1]}"
            if [[ -n "${BASH_REMATCH[2]}" ]]
            then
              pub="false"
            else
              pub="true"
            fi
          else
            ver=""
            pub="false"
          fi
          echo "version=$ver" >> "$GITHUB_OUTPUT"
          echo "publish=$pub" >> "$GITHUB_OUTPUT"
          echo "Version: $ver"
          echo "Publish: $pub"
  build:
    name: Build packages
    needs: prepare
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        target: [x86_64, aarch64]
        include:
          - os: windows-latest
            target: i686

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
          architecture: ${{ matrix.target == 'i686' && 'x86' || matrix.target == 'aarch64' && matrix.os == 'windows-latest' && 'arm64' || 'x64' }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install "maturin==${{ needs.prepare.outputs.maturin_version }}" build
      - name: Update Cargo.toml version
        if: needs.prepare.outputs.publish == 'true'
        env:
          VERSION: ${{ needs.prepare.outputs.version }}
        run: |
          $cargo = Get-Content "Cargo.toml"
          for ($i = 0; $i -lt $cargo.Length; $i++) { 
              if ($cargo[$i] -match '^version = ".+"') {
                  $cargo[$i] = "version = ""$env:VERSION"""
                  break
              }
          }
          $cargo | Out-File -Force -Encoding "UTF8" -FilePath "Cargo.toml"
        shell: pwsh
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          maturin-version: ${{ needs.prepare.outputs.maturin_version }}
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out dist -m Cargo.toml
          command: build
          rust-toolchain: stable
          sccache: false
      - name: Build wheels (musllinux)
        uses: PyO3/maturin-action@v1
        if: matrix.os == 'ubuntu-latest'
        with:
          maturin-version: ${{ needs.prepare.outputs.maturin_version }}
          target: ${{ matrix.target }}-unknown-linux-musl
          manylinux: musllinux_1_2
          args: --release --out dist -m Cargo.toml
          command: build
          rust-toolchain: stable
          sccache: false
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.target }}
          path: dist/

  publish:
    name: Upload release to PyPI
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: needs.prepare.outputs.publish == 'true'
    environment: release
    permissions:
      id-token: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
          merge-multiple: true
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
